/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.pharmgkb.io.ncbi.model.Warnings;

/**
 * The allele-description fields of a VCF entry. They are properly left-shifted and contain a padding nucleotide for del, ins, and indel type changes.
 */
@Schema(description = "The allele-description fields of a VCF entry. They are properly left-shifted and contain a padding nucleotide for del, ins, and indel type changes.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-25T10:32:24.325-07:00[America/Los_Angeles]")public class VcfFields {

  @SerializedName("chrom")
  private String chrom = null;

  @SerializedName("pos")
  private Integer pos = null;

  @SerializedName("ref")
  private String ref = null;

  @SerializedName("alt")
  private String alt = null;

  @SerializedName("warnings")
  private Warnings warnings = null;
  public VcfFields chrom(String chrom) {
    this.chrom = chrom;
    return this;
  }

  

  /**
  * The RefSeq/Genbank Accession.Version for the reference sequence. Despite the name (taken from the VCF standard) this does not need to be a chromosome.
  * @return chrom
  **/
  @Schema(required = true, description = "The RefSeq/Genbank Accession.Version for the reference sequence. Despite the name (taken from the VCF standard) this does not need to be a chromosome.")
  public String getChrom() {
    return chrom;
  }
  public void setChrom(String chrom) {
    this.chrom = chrom;
  }
  public VcfFields pos(Integer pos) {
    this.pos = pos;
    return this;
  }

  

  /**
  * The 1-based position of the first nucleotide in the reference allele string on its sequence
  * @return pos
  **/
  @Schema(required = true, description = "The 1-based position of the first nucleotide in the reference allele string on its sequence")
  public Integer getPos() {
    return pos;
  }
  public void setPos(Integer pos) {
    this.pos = pos;
  }
  public VcfFields ref(String ref) {
    this.ref = ref;
    return this;
  }

  

  /**
  * The reference allele, with padding nucleotide when required
  * @return ref
  **/
  @Schema(required = true, description = "The reference allele, with padding nucleotide when required")
  public String getRef() {
    return ref;
  }
  public void setRef(String ref) {
    this.ref = ref;
  }
  public VcfFields alt(String alt) {
    this.alt = alt;
    return this;
  }

  

  /**
  * Alternate allele, with padding nucleotide when required
  * @return alt
  **/
  @Schema(required = true, description = "Alternate allele, with padding nucleotide when required")
  public String getAlt() {
    return alt;
  }
  public void setAlt(String alt) {
    this.alt = alt;
  }
  public VcfFields warnings(Warnings warnings) {
    this.warnings = warnings;
    return this;
  }

  

  /**
  * Get warnings
  * @return warnings
  **/
  @Schema(description = "")
  public Warnings getWarnings() {
    return warnings;
  }
  public void setWarnings(Warnings warnings) {
    this.warnings = warnings;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VcfFields vcfFields = (VcfFields) o;
    return Objects.equals(this.chrom, vcfFields.chrom) &&
        Objects.equals(this.pos, vcfFields.pos) &&
        Objects.equals(this.ref, vcfFields.ref) &&
        Objects.equals(this.alt, vcfFields.alt) &&
        Objects.equals(this.warnings, vcfFields.warnings);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(chrom, pos, ref, alt, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VcfFields {\n");
    
    sb.append("    chrom: ").append(toIndentedString(chrom)).append("\n");
    sb.append("    pos: ").append(toIndentedString(pos)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
