/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.pharmgkb.io.ncbi.model.RnaAnnotForAllele;
import org.pharmgkb.io.ncbi.model.SoTerm;

/**
 * Each Gene consists of a tree of RNAs and Coding Regions (Proteins) and associated SO-terms
 */
@Schema(description = "Each Gene consists of a tree of RNAs and Coding Regions (Proteins) and associated SO-terms")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-25T10:32:24.325-07:00[America/Los_Angeles]")public class GeneAnnotForAllele {

  @SerializedName("name")
  private String name = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("locus")
  private String locus = null;

  @SerializedName("is_pseudo")
  private Boolean isPseudo = null;
  /**
   * The orientation of the gene relative to the parent assembly sequence upon which it is annotated.  This orientation applies to all children RNAs and Proteins as well.
   */
  @JsonAdapter(OrientationEnum.Adapter.class)
  public enum OrientationEnum {
    PLUS("plus"),
    MINUS("minus");

    private String value;

    OrientationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OrientationEnum fromValue(String text) {
      for (OrientationEnum b : OrientationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrientationEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("orientation")
  private OrientationEnum orientation = null;

  @SerializedName("sequence_ontology")
  private List<SoTerm> sequenceOntology = new ArrayList<SoTerm>();

  @SerializedName("rnas")
  private List<RnaAnnotForAllele> rnas = new ArrayList<RnaAnnotForAllele>();
  public GeneAnnotForAllele name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * The name of the Gene
  * @return name
  **/
  @Schema(required = true, description = "The name of the Gene")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public GeneAnnotForAllele id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * The NCBI GeneId
  * @return id
  **/
  @Schema(required = true, description = "The NCBI GeneId")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public GeneAnnotForAllele locus(String locus) {
    this.locus = locus;
    return this;
  }

  

  /**
  * The NCBI Gene Symbol
  * @return locus
  **/
  @Schema(example = "BRCA1", required = true, description = "The NCBI Gene Symbol")
  public String getLocus() {
    return locus;
  }
  public void setLocus(String locus) {
    this.locus = locus;
  }
  public GeneAnnotForAllele isPseudo(Boolean isPseudo) {
    this.isPseudo = isPseudo;
    return this;
  }

  

  /**
  * True, if the gene is labeled a Pseudo-gene by NCBI Gene Resource at the time this revision is built
  * @return isPseudo
  **/
  @Schema(required = true, description = "True, if the gene is labeled a Pseudo-gene by NCBI Gene Resource at the time this revision is built")
  public Boolean isIsPseudo() {
    return isPseudo;
  }
  public void setIsPseudo(Boolean isPseudo) {
    this.isPseudo = isPseudo;
  }
  public GeneAnnotForAllele orientation(OrientationEnum orientation) {
    this.orientation = orientation;
    return this;
  }

  

  /**
  * The orientation of the gene relative to the parent assembly sequence upon which it is annotated.  This orientation applies to all children RNAs and Proteins as well.
  * @return orientation
  **/
  @Schema(required = true, description = "The orientation of the gene relative to the parent assembly sequence upon which it is annotated.  This orientation applies to all children RNAs and Proteins as well.")
  public OrientationEnum getOrientation() {
    return orientation;
  }
  public void setOrientation(OrientationEnum orientation) {
    this.orientation = orientation;
  }
  public GeneAnnotForAllele sequenceOntology(List<SoTerm> sequenceOntology) {
    this.sequenceOntology = sequenceOntology;
    return this;
  }

  public GeneAnnotForAllele addSequenceOntologyItem(SoTerm sequenceOntologyItem) {
    this.sequenceOntology.add(sequenceOntologyItem);
    return this;
  }

  /**
  * The description of the variant in respect to its location relative to this gene
  * @return sequenceOntology
  **/
  @Schema(required = true, description = "The description of the variant in respect to its location relative to this gene")
  public List<SoTerm> getSequenceOntology() {
    return sequenceOntology;
  }
  public void setSequenceOntology(List<SoTerm> sequenceOntology) {
    this.sequenceOntology = sequenceOntology;
  }
  public GeneAnnotForAllele rnas(List<RnaAnnotForAllele> rnas) {
    this.rnas = rnas;
    return this;
  }

  public GeneAnnotForAllele addRnasItem(RnaAnnotForAllele rnasItem) {
    this.rnas.add(rnasItem);
    return this;
  }

  /**
  * The set of RNAs annotated on this gene.  In the case of mitochondria, the chromosome coordinate is repeated, as it is the stand-in for the RNA.
  * @return rnas
  **/
  @Schema(required = true, description = "The set of RNAs annotated on this gene.  In the case of mitochondria, the chromosome coordinate is repeated, as it is the stand-in for the RNA.")
  public List<RnaAnnotForAllele> getRnas() {
    return rnas;
  }
  public void setRnas(List<RnaAnnotForAllele> rnas) {
    this.rnas = rnas;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneAnnotForAllele geneAnnotForAllele = (GeneAnnotForAllele) o;
    return Objects.equals(this.name, geneAnnotForAllele.name) &&
        Objects.equals(this.id, geneAnnotForAllele.id) &&
        Objects.equals(this.locus, geneAnnotForAllele.locus) &&
        Objects.equals(this.isPseudo, geneAnnotForAllele.isPseudo) &&
        Objects.equals(this.orientation, geneAnnotForAllele.orientation) &&
        Objects.equals(this.sequenceOntology, geneAnnotForAllele.sequenceOntology) &&
        Objects.equals(this.rnas, geneAnnotForAllele.rnas);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, id, locus, isPseudo, orientation, sequenceOntology, rnas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneAnnotForAllele {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locus: ").append(toIndentedString(locus)).append("\n");
    sb.append("    isPseudo: ").append(toIndentedString(isPseudo)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    sequenceOntology: ").append(toIndentedString(sequenceOntology)).append("\n");
    sb.append("    rnas: ").append(toIndentedString(rnas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
