/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.pharmgkb.io.ncbi.model.CodonAlignedTranscriptChange;
import org.pharmgkb.io.ncbi.model.ProteinAnnotForAllele;
import org.pharmgkb.io.ncbi.model.SoTerm;

/**
 * Represents the manifestation of a particular allele on a particular RNA. If product_id is absent, this is a non-coding RNA.
 */
@Schema(description = "Represents the manifestation of a particular allele on a particular RNA. If product_id is absent, this is a non-coding RNA.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-25T10:32:24.325-07:00[America/Los_Angeles]")public class RnaAnnotForAllele {

  @SerializedName("id")
  private String id = null;

  @SerializedName("codon_aligned_transcript_change")
  private CodonAlignedTranscriptChange codonAlignedTranscriptChange = null;

  @SerializedName("sequence_ontology")
  private List<SoTerm> sequenceOntology = new ArrayList<SoTerm>();

  @SerializedName("product_id")
  private String productId = null;

  @SerializedName("protein")
  private ProteinAnnotForAllele protein = null;
  public RnaAnnotForAllele id(String id) {
    this.id = id;
    return this;
  }

  

  /**
  * The RefSeq/Genbank Accession.Version for the reference sequence
  * @return id
  **/
  @Schema(example = "NC_000001.23", required = true, description = "The RefSeq/Genbank Accession.Version for the reference sequence")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }
  public RnaAnnotForAllele codonAlignedTranscriptChange(CodonAlignedTranscriptChange codonAlignedTranscriptChange) {
    this.codonAlignedTranscriptChange = codonAlignedTranscriptChange;
    return this;
  }

  

  /**
  * Get codonAlignedTranscriptChange
  * @return codonAlignedTranscriptChange
  **/
  @Schema(description = "")
  public CodonAlignedTranscriptChange getCodonAlignedTranscriptChange() {
    return codonAlignedTranscriptChange;
  }
  public void setCodonAlignedTranscriptChange(CodonAlignedTranscriptChange codonAlignedTranscriptChange) {
    this.codonAlignedTranscriptChange = codonAlignedTranscriptChange;
  }
  public RnaAnnotForAllele sequenceOntology(List<SoTerm> sequenceOntology) {
    this.sequenceOntology = sequenceOntology;
    return this;
  }

  public RnaAnnotForAllele addSequenceOntologyItem(SoTerm sequenceOntologyItem) {
    this.sequenceOntology.add(sequenceOntologyItem);
    return this;
  }

  /**
  * The description of the variant in respect to its location relative to this RNA
  * @return sequenceOntology
  **/
  @Schema(required = true, description = "The description of the variant in respect to its location relative to this RNA")
  public List<SoTerm> getSequenceOntology() {
    return sequenceOntology;
  }
  public void setSequenceOntology(List<SoTerm> sequenceOntology) {
    this.sequenceOntology = sequenceOntology;
  }
  public RnaAnnotForAllele productId(String productId) {
    this.productId = productId;
    return this;
  }

  

  /**
  * The RefSeq/Genbank Accession.Version for the reference sequence
  * @return productId
  **/
  @Schema(example = "NC_000001.23", description = "The RefSeq/Genbank Accession.Version for the reference sequence")
  public String getProductId() {
    return productId;
  }
  public void setProductId(String productId) {
    this.productId = productId;
  }
  public RnaAnnotForAllele protein(ProteinAnnotForAllele protein) {
    this.protein = protein;
    return this;
  }

  

  /**
  * Get protein
  * @return protein
  **/
  @Schema(description = "")
  public ProteinAnnotForAllele getProtein() {
    return protein;
  }
  public void setProtein(ProteinAnnotForAllele protein) {
    this.protein = protein;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RnaAnnotForAllele rnaAnnotForAllele = (RnaAnnotForAllele) o;
    return Objects.equals(this.id, rnaAnnotForAllele.id) &&
        Objects.equals(this.codonAlignedTranscriptChange, rnaAnnotForAllele.codonAlignedTranscriptChange) &&
        Objects.equals(this.sequenceOntology, rnaAnnotForAllele.sequenceOntology) &&
        Objects.equals(this.productId, rnaAnnotForAllele.productId) &&
        Objects.equals(this.protein, rnaAnnotForAllele.protein);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, codonAlignedTranscriptChange, sequenceOntology, productId, protein);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RnaAnnotForAllele {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    codonAlignedTranscriptChange: ").append(toIndentedString(codonAlignedTranscriptChange)).append("\n");
    sb.append("    sequenceOntology: ").append(toIndentedString(sequenceOntology)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    protein: ").append(toIndentedString(protein)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
