/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.pharmgkb.io.ncbi.model.PreviousRelease;
import org.pharmgkb.io.ncbi.model.Spdi;
import org.pharmgkb.io.ncbi.model.SupportId;

/**
 * For recording the movement of an observation in the current RefSNP for the current release.
 */
@Schema(description = "For recording the movement of an observation in the current RefSNP for the current release.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-25T10:32:24.325-07:00[America/Los_Angeles]")public class PresentObsMovement {

  @SerializedName("component_ids")
  private List<SupportId> componentIds = new ArrayList<SupportId>();

  @SerializedName("observation")
  private Spdi observation = null;

  @SerializedName("allele_in_cur_release")
  private Spdi alleleInCurRelease = null;

  @SerializedName("other_rsids_in_cur_release")
  private List<String> otherRsidsInCurRelease = new ArrayList<String>();

  @SerializedName("previous_release")
  private PreviousRelease previousRelease = null;

  @SerializedName("last_added_to_this_rs")
  private String lastAddedToThisRs = null;
  public PresentObsMovement componentIds(List<SupportId> componentIds) {
    this.componentIds = componentIds;
    return this;
  }

  public PresentObsMovement addComponentIdsItem(SupportId componentIdsItem) {
    this.componentIds.add(componentIdsItem);
    return this;
  }

  /**
  * DbSnpIds of the supporting data where this particular observation is found (SubSnpId, ClinVarSnpId, etc.)
  * @return componentIds
  **/
  @Schema(required = true, description = "DbSnpIds of the supporting data where this particular observation is found (SubSnpId, ClinVarSnpId, etc.)")
  public List<SupportId> getComponentIds() {
    return componentIds;
  }
  public void setComponentIds(List<SupportId> componentIds) {
    this.componentIds = componentIds;
  }
  public PresentObsMovement observation(Spdi observation) {
    this.observation = observation;
    return this;
  }

  

  /**
  * Get observation
  * @return observation
  **/
  @Schema(required = true, description = "")
  public Spdi getObservation() {
    return observation;
  }
  public void setObservation(Spdi observation) {
    this.observation = observation;
  }
  public PresentObsMovement alleleInCurRelease(Spdi alleleInCurRelease) {
    this.alleleInCurRelease = alleleInCurRelease;
    return this;
  }

  

  /**
  * Get alleleInCurRelease
  * @return alleleInCurRelease
  **/
  @Schema(required = true, description = "")
  public Spdi getAlleleInCurRelease() {
    return alleleInCurRelease;
  }
  public void setAlleleInCurRelease(Spdi alleleInCurRelease) {
    this.alleleInCurRelease = alleleInCurRelease;
  }
  public PresentObsMovement otherRsidsInCurRelease(List<String> otherRsidsInCurRelease) {
    this.otherRsidsInCurRelease = otherRsidsInCurRelease;
    return this;
  }

  public PresentObsMovement addOtherRsidsInCurReleaseItem(String otherRsidsInCurReleaseItem) {
    this.otherRsidsInCurRelease.add(otherRsidsInCurReleaseItem);
    return this;
  }

  /**
  * The RSIDs of any other RefSnps that contain this observation in the current release. Can only be non-empty for the identity allele.
  * @return otherRsidsInCurRelease
  **/
  @Schema(required = true, description = "The RSIDs of any other RefSnps that contain this observation in the current release. Can only be non-empty for the identity allele.")
  public List<String> getOtherRsidsInCurRelease() {
    return otherRsidsInCurRelease;
  }
  public void setOtherRsidsInCurRelease(List<String> otherRsidsInCurRelease) {
    this.otherRsidsInCurRelease = otherRsidsInCurRelease;
  }
  public PresentObsMovement previousRelease(PreviousRelease previousRelease) {
    this.previousRelease = previousRelease;
    return this;
  }

  

  /**
  * Get previousRelease
  * @return previousRelease
  **/
  @Schema(description = "")
  public PreviousRelease getPreviousRelease() {
    return previousRelease;
  }
  public void setPreviousRelease(PreviousRelease previousRelease) {
    this.previousRelease = previousRelease;
  }
  public PresentObsMovement lastAddedToThisRs(String lastAddedToThisRs) {
    this.lastAddedToThisRs = lastAddedToThisRs;
    return this;
  }

  

  /**
  * The most recent release in which this observation started being associated with this RSID. If the historical membership for this observation is release1:rs1 release2:rs2 release3:rs1 release4:rs1, this will hold \&quot;release3\&quot;. Note that because of a change to the dbSNP data model between builds 151 and 152, if the most recent release is prior to 152 then the observation may have been added to this RefSNP before the build listed.  For example, if it says 140, it is possible that it was really added in 130. But it cannot have been added after build 140. If it says 152, then it was last added in build 152 and not before or after that.
  * @return lastAddedToThisRs
  **/
  @Schema(required = true, description = "The most recent release in which this observation started being associated with this RSID. If the historical membership for this observation is release1:rs1 release2:rs2 release3:rs1 release4:rs1, this will hold \"release3\". Note that because of a change to the dbSNP data model between builds 151 and 152, if the most recent release is prior to 152 then the observation may have been added to this RefSNP before the build listed.  For example, if it says 140, it is possible that it was really added in 130. But it cannot have been added after build 140. If it says 152, then it was last added in build 152 and not before or after that.")
  public String getLastAddedToThisRs() {
    return lastAddedToThisRs;
  }
  public void setLastAddedToThisRs(String lastAddedToThisRs) {
    this.lastAddedToThisRs = lastAddedToThisRs;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresentObsMovement presentObsMovement = (PresentObsMovement) o;
    return Objects.equals(this.componentIds, presentObsMovement.componentIds) &&
        Objects.equals(this.observation, presentObsMovement.observation) &&
        Objects.equals(this.alleleInCurRelease, presentObsMovement.alleleInCurRelease) &&
        Objects.equals(this.otherRsidsInCurRelease, presentObsMovement.otherRsidsInCurRelease) &&
        Objects.equals(this.previousRelease, presentObsMovement.previousRelease) &&
        Objects.equals(this.lastAddedToThisRs, presentObsMovement.lastAddedToThisRs);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(componentIds, observation, alleleInCurRelease, otherRsidsInCurRelease, previousRelease, lastAddedToThisRs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresentObsMovement {\n");
    
    sb.append("    componentIds: ").append(toIndentedString(componentIds)).append("\n");
    sb.append("    observation: ").append(toIndentedString(observation)).append("\n");
    sb.append("    alleleInCurRelease: ").append(toIndentedString(alleleInCurRelease)).append("\n");
    sb.append("    otherRsidsInCurRelease: ").append(toIndentedString(otherRsidsInCurRelease)).append("\n");
    sb.append("    previousRelease: ").append(toIndentedString(previousRelease)).append("\n");
    sb.append("    lastAddedToThisRs: ").append(toIndentedString(lastAddedToThisRs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
