/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * Record of one RefSNP merging into another. Due to curatorial changes or a change in input alignment data sets, a RefSNP may change anchor such that it now coincides with second RefSNP.  Only one &#x27;live&#x27; RefSNP is allowed at a given anchor. To resolve this conflict, dbSNP chooses one RefSNP as &#x27;live&#x27;, and merges the data from the other RefSNP into it. dbSNP gives preference to the clinical RefSNP and if that is not sufficient it chooses the oldest RefSNP, the one with the lowest ID.
 */
@Schema(description = "Record of one RefSNP merging into another. Due to curatorial changes or a change in input alignment data sets, a RefSNP may change anchor such that it now coincides with second RefSNP.  Only one 'live' RefSNP is allowed at a given anchor. To resolve this conflict, dbSNP chooses one RefSNP as 'live', and merges the data from the other RefSNP into it. dbSNP gives preference to the clinical RefSNP and if that is not sufficient it chooses the oldest RefSNP, the one with the lowest ID.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-25T10:32:24.325-07:00[America/Los_Angeles]")public class Dbsnp1MergeEvent {

  @SerializedName("merged_rsid")
  private String mergedRsid = null;

  @SerializedName("revision")
  private String revision = null;

  @SerializedName("merge_date")
  private String mergeDate = null;
  public Dbsnp1MergeEvent mergedRsid(String mergedRsid) {
    this.mergedRsid = mergedRsid;
    return this;
  }

  

  /**
  * The RefSNP ID of the RefSNP object that was merged into the now live RefSNP
  * @return mergedRsid
  **/
  @Schema(required = true, description = "The RefSNP ID of the RefSNP object that was merged into the now live RefSNP")
  public String getMergedRsid() {
    return mergedRsid;
  }
  public void setMergedRsid(String mergedRsid) {
    this.mergedRsid = mergedRsid;
  }
  public Dbsnp1MergeEvent revision(String revision) {
    this.revision = revision;
    return this;
  }

  

  /**
  * The revision in which the merge took place
  * @return revision
  **/
  @Schema(required = true, description = "The revision in which the merge took place")
  public String getRevision() {
    return revision;
  }
  public void setRevision(String revision) {
    this.revision = revision;
  }
  public Dbsnp1MergeEvent mergeDate(String mergeDate) {
    this.mergeDate = mergeDate;
    return this;
  }

  

  /**
  * The date and time the RefSNP was merged
  * @return mergeDate
  **/
  @Schema(example = "2001-01-15T00:00Z", required = true, description = "The date and time the RefSNP was merged")
  public String getMergeDate() {
    return mergeDate;
  }
  public void setMergeDate(String mergeDate) {
    this.mergeDate = mergeDate;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dbsnp1MergeEvent dbsnp1MergeEvent = (Dbsnp1MergeEvent) o;
    return Objects.equals(this.mergedRsid, dbsnp1MergeEvent.mergedRsid) &&
        Objects.equals(this.revision, dbsnp1MergeEvent.revision) &&
        Objects.equals(this.mergeDate, dbsnp1MergeEvent.mergeDate);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(mergedRsid, revision, mergeDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dbsnp1MergeEvent {\n");
    
    sb.append("    mergedRsid: ").append(toIndentedString(mergedRsid)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    mergeDate: ").append(toIndentedString(mergeDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
