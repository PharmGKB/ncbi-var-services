/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.pharmgkb.io.ncbi.model.AssemblyAnnotForAllele;
import org.pharmgkb.io.ncbi.model.ClinvarData;
import org.pharmgkb.io.ncbi.model.FrequencyData;

/**
 * Clinical, frequency, and submission information that apply to a particular allele independent of its placement.
 */
@Schema(description = "Clinical, frequency, and submission information that apply to a particular allele independent of its placement.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-25T10:32:24.325-07:00[America/Los_Angeles]")public class AlleleAnnotationList {

  @SerializedName("frequency")
  private List<FrequencyData> frequency = new ArrayList<FrequencyData>();

  @SerializedName("clinical")
  private List<ClinvarData> clinical = new ArrayList<ClinvarData>();

  @SerializedName("submissions")
  private List<String> submissions = new ArrayList<String>();

  @SerializedName("assembly_annotation")
  private List<AssemblyAnnotForAllele> assemblyAnnotation = new ArrayList<AssemblyAnnotForAllele>();
  public AlleleAnnotationList frequency(List<FrequencyData> frequency) {
    this.frequency = frequency;
    return this;
  }

  public AlleleAnnotationList addFrequencyItem(FrequencyData frequencyItem) {
    this.frequency.add(frequencyItem);
    return this;
  }

  /**
  * Selected frequency attributes for each large genotype/frequency study (if any) in which the allele has been reported. One frequency_data object per study.
  * @return frequency
  **/
  @Schema(required = true, description = "Selected frequency attributes for each large genotype/frequency study (if any) in which the allele has been reported. One frequency_data object per study.")
  public List<FrequencyData> getFrequency() {
    return frequency;
  }
  public void setFrequency(List<FrequencyData> frequency) {
    this.frequency = frequency;
  }
  public AlleleAnnotationList clinical(List<ClinvarData> clinical) {
    this.clinical = clinical;
    return this;
  }

  public AlleleAnnotationList addClinicalItem(ClinvarData clinicalItem) {
    this.clinical.add(clinicalItem);
    return this;
  }

  /**
  * Select clinical attributes for each NCBI ClinVar RCV of which this allele is a member
  * @return clinical
  **/
  @Schema(required = true, description = "Select clinical attributes for each NCBI ClinVar RCV of which this allele is a member")
  public List<ClinvarData> getClinical() {
    return clinical;
  }
  public void setClinical(List<ClinvarData> clinical) {
    this.clinical = clinical;
  }
  public AlleleAnnotationList submissions(List<String> submissions) {
    this.submissions = submissions;
    return this;
  }

  public AlleleAnnotationList addSubmissionsItem(String submissionsItem) {
    this.submissions.add(submissionsItem);
    return this;
  }

  /**
  * The particular SubSNP ids that support this allele are reported here
  * @return submissions
  **/
  @Schema(required = true, description = "The particular SubSNP ids that support this allele are reported here")
  public List<String> getSubmissions() {
    return submissions;
  }
  public void setSubmissions(List<String> submissions) {
    this.submissions = submissions;
  }
  public AlleleAnnotationList assemblyAnnotation(List<AssemblyAnnotForAllele> assemblyAnnotation) {
    this.assemblyAnnotation = assemblyAnnotation;
    return this;
  }

  public AlleleAnnotationList addAssemblyAnnotationItem(AssemblyAnnotForAllele assemblyAnnotationItem) {
    this.assemblyAnnotation.add(assemblyAnnotationItem);
    return this;
  }

  /**
  * For this particular allele, the set of Annotation Releases and associated sequences for which Genes, RNAs and Coding Regions are annotated
  * @return assemblyAnnotation
  **/
  @Schema(required = true, description = "For this particular allele, the set of Annotation Releases and associated sequences for which Genes, RNAs and Coding Regions are annotated")
  public List<AssemblyAnnotForAllele> getAssemblyAnnotation() {
    return assemblyAnnotation;
  }
  public void setAssemblyAnnotation(List<AssemblyAnnotForAllele> assemblyAnnotation) {
    this.assemblyAnnotation = assemblyAnnotation;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlleleAnnotationList alleleAnnotationList = (AlleleAnnotationList) o;
    return Objects.equals(this.frequency, alleleAnnotationList.frequency) &&
        Objects.equals(this.clinical, alleleAnnotationList.clinical) &&
        Objects.equals(this.submissions, alleleAnnotationList.submissions) &&
        Objects.equals(this.assemblyAnnotation, alleleAnnotationList.assemblyAnnotation);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(frequency, clinical, submissions, assemblyAnnotation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlleleAnnotationList {\n");
    
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    clinical: ").append(toIndentedString(clinical)).append("\n");
    sb.append("    submissions: ").append(toIndentedString(submissions)).append("\n");
    sb.append("    assemblyAnnotation: ").append(toIndentedString(assemblyAnnotation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
