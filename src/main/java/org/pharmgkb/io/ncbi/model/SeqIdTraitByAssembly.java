/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * Sequences in general and contigs and chromosomes in particular may have different roles in different genomic assemblies. This object describes the role of a sequence in a particular assembly.
 */
@Schema(description = "Sequences in general and contigs and chromosomes in particular may have different roles in different genomic assemblies. This object describes the role of a sequence in a particular assembly.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-25T10:32:24.325-07:00[America/Los_Angeles]")public class SeqIdTraitByAssembly {

  @SerializedName("assembly_name")
  private String assemblyName = null;

  @SerializedName("assembly_accession")
  private String assemblyAccession = null;

  @SerializedName("is_top_level")
  private Boolean isTopLevel = null;

  @SerializedName("is_alt")
  private Boolean isAlt = null;

  @SerializedName("is_patch")
  private Boolean isPatch = null;

  @SerializedName("is_chromosome")
  private Boolean isChromosome = null;
  public SeqIdTraitByAssembly assemblyName(String assemblyName) {
    this.assemblyName = assemblyName;
    return this;
  }

  

  /**
  * The name of the assembly these traits reference
  * @return assemblyName
  **/
  @Schema(required = true, description = "The name of the assembly these traits reference")
  public String getAssemblyName() {
    return assemblyName;
  }
  public void setAssemblyName(String assemblyName) {
    this.assemblyName = assemblyName;
  }
  public SeqIdTraitByAssembly assemblyAccession(String assemblyAccession) {
    this.assemblyAccession = assemblyAccession;
    return this;
  }

  

  /**
  * The Genomic Collections accession for this assembly. For more information, see, for example, http://www.ncbi.nlm.nih.gov/assembly/GCF_000001405.38/
  * @return assemblyAccession
  **/
  @Schema(required = true, description = "The Genomic Collections accession for this assembly. For more information, see, for example, http://www.ncbi.nlm.nih.gov/assembly/GCF_000001405.38/")
  public String getAssemblyAccession() {
    return assemblyAccession;
  }
  public void setAssemblyAccession(String assemblyAccession) {
    this.assemblyAccession = assemblyAccession;
  }
  public SeqIdTraitByAssembly isTopLevel(Boolean isTopLevel) {
    this.isTopLevel = isTopLevel;
    return this;
  }

  

  /**
  * True if the sequence is top-level (the most highly assembled sequences in a genome assembly)
  * @return isTopLevel
  **/
  @Schema(required = true, description = "True if the sequence is top-level (the most highly assembled sequences in a genome assembly)")
  public Boolean isIsTopLevel() {
    return isTopLevel;
  }
  public void setIsTopLevel(Boolean isTopLevel) {
    this.isTopLevel = isTopLevel;
  }
  public SeqIdTraitByAssembly isAlt(Boolean isAlt) {
    this.isAlt = isAlt;
    return this;
  }

  

  /**
  * True if this placement&#x27;s sequence is an alternative loci (a sequence that provides an alternate representation of a locus found in a largely haploid assembly)
  * @return isAlt
  **/
  @Schema(required = true, description = "True if this placement's sequence is an alternative loci (a sequence that provides an alternate representation of a locus found in a largely haploid assembly)")
  public Boolean isIsAlt() {
    return isAlt;
  }
  public void setIsAlt(Boolean isAlt) {
    this.isAlt = isAlt;
  }
  public SeqIdTraitByAssembly isPatch(Boolean isPatch) {
    this.isPatch = isPatch;
    return this;
  }

  

  /**
  * True if this placement&#x27;s sequence is a patch sequence (a contig sequence that is released outside of the full assembly release cycle.  These sequences are meant to add information to the assembly without disrupting the stable coordinate system)
  * @return isPatch
  **/
  @Schema(required = true, description = "True if this placement's sequence is a patch sequence (a contig sequence that is released outside of the full assembly release cycle.  These sequences are meant to add information to the assembly without disrupting the stable coordinate system)")
  public Boolean isIsPatch() {
    return isPatch;
  }
  public void setIsPatch(Boolean isPatch) {
    this.isPatch = isPatch;
  }
  public SeqIdTraitByAssembly isChromosome(Boolean isChromosome) {
    this.isChromosome = isChromosome;
    return this;
  }

  

  /**
  * True if this placement&#x27;s sequence is a chromosome sequence (a relatively complete pseudo-molecule assembled from smaller sequences (components) that represent a biological chromosome)
  * @return isChromosome
  **/
  @Schema(required = true, description = "True if this placement's sequence is a chromosome sequence (a relatively complete pseudo-molecule assembled from smaller sequences (components) that represent a biological chromosome)")
  public Boolean isIsChromosome() {
    return isChromosome;
  }
  public void setIsChromosome(Boolean isChromosome) {
    this.isChromosome = isChromosome;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeqIdTraitByAssembly seqIdTraitByAssembly = (SeqIdTraitByAssembly) o;
    return Objects.equals(this.assemblyName, seqIdTraitByAssembly.assemblyName) &&
        Objects.equals(this.assemblyAccession, seqIdTraitByAssembly.assemblyAccession) &&
        Objects.equals(this.isTopLevel, seqIdTraitByAssembly.isTopLevel) &&
        Objects.equals(this.isAlt, seqIdTraitByAssembly.isAlt) &&
        Objects.equals(this.isPatch, seqIdTraitByAssembly.isPatch) &&
        Objects.equals(this.isChromosome, seqIdTraitByAssembly.isChromosome);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(assemblyName, assemblyAccession, isTopLevel, isAlt, isPatch, isChromosome);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeqIdTraitByAssembly {\n");
    
    sb.append("    assemblyName: ").append(toIndentedString(assemblyName)).append("\n");
    sb.append("    assemblyAccession: ").append(toIndentedString(assemblyAccession)).append("\n");
    sb.append("    isTopLevel: ").append(toIndentedString(isTopLevel)).append("\n");
    sb.append("    isAlt: ").append(toIndentedString(isAlt)).append("\n");
    sb.append("    isPatch: ").append(toIndentedString(isPatch)).append("\n");
    sb.append("    isChromosome: ").append(toIndentedString(isChromosome)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
