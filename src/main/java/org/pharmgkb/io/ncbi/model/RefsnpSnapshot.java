/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.pharmgkb.io.ncbi.model.Dbsnp1MergeEvent;
import org.pharmgkb.io.ncbi.model.LostObsMovement;
import org.pharmgkb.io.ncbi.model.MergedSnapshotData;
import org.pharmgkb.io.ncbi.model.NosnpposSnapshotData;
import org.pharmgkb.io.ncbi.model.PresentObsMovement;
import org.pharmgkb.io.ncbi.model.PrimarySnapshotData;
import org.pharmgkb.io.ncbi.model.UnsupportedSnapshotData;
import org.pharmgkb.io.ncbi.model.WithdrawnSnapshotData;

/**
 * The characteristics of a single group of short variants equivalent by type and position over several sequences as calculated based on the information available at a particular point in time. It is a snapshot at a particular point in time of the ever-evolving knowledge of a particular class of variants. \&quot;refsnp_snapshot\&quot; has four subclasses: primary_snapshot, merged_snapshot, unsupported_snapshot, and nosnppos_snapshot (deprecated). They are each represented by an instance of this object with the appropriate data field (primary_snapshot_data, merged_snapshot_data, unsupported_snapshot or nosnppos_snapshot_data) filled in. It is an error to have more than one of these filled in (though our C++ code generator cannot parse the YAML necessary to specify this constraint, so we do not enforce it).
 */
@Schema(description = "The characteristics of a single group of short variants equivalent by type and position over several sequences as calculated based on the information available at a particular point in time. It is a snapshot at a particular point in time of the ever-evolving knowledge of a particular class of variants. \"refsnp_snapshot\" has four subclasses: primary_snapshot, merged_snapshot, unsupported_snapshot, and nosnppos_snapshot (deprecated). They are each represented by an instance of this object with the appropriate data field (primary_snapshot_data, merged_snapshot_data, unsupported_snapshot or nosnppos_snapshot_data) filled in. It is an error to have more than one of these filled in (though our C++ code generator cannot parse the YAML necessary to specify this constraint, so we do not enforce it).")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-25T10:32:24.325-07:00[America/Los_Angeles]")public class RefsnpSnapshot {

  @SerializedName("refsnp_id")
  private String refsnpId = null;

  @SerializedName("create_date")
  private String createDate = null;

  @SerializedName("last_update_date")
  private String lastUpdateDate = null;

  @SerializedName("last_update_build_id")
  private String lastUpdateBuildId = null;

  @SerializedName("dbsnp1_merges")
  private List<Dbsnp1MergeEvent> dbsnp1Merges = new ArrayList<Dbsnp1MergeEvent>();

  @SerializedName("citations")
  private List<Integer> citations = new ArrayList<Integer>();

  @SerializedName("lost_obs_movements")
  private List<LostObsMovement> lostObsMovements = new ArrayList<LostObsMovement>();

  @SerializedName("present_obs_movements")
  private List<PresentObsMovement> presentObsMovements = new ArrayList<PresentObsMovement>();

  @SerializedName("nosnppos_snapshot_data")
  private NosnpposSnapshotData nosnpposSnapshotData = null;

  @SerializedName("withdrawn_snapshot_data")
  private WithdrawnSnapshotData withdrawnSnapshotData = null;

  @SerializedName("primary_snapshot_data")
  private PrimarySnapshotData primarySnapshotData = null;

  @SerializedName("merged_snapshot_data")
  private MergedSnapshotData mergedSnapshotData = null;

  @SerializedName("unsupported_snapshot_data")
  private UnsupportedSnapshotData unsupportedSnapshotData = null;
  public RefsnpSnapshot refsnpId(String refsnpId) {
    this.refsnpId = refsnpId;
    return this;
  }

  

  /**
  * A 64 bit positive integer that is uniquely and forever assigned to this RefSNP object
  * @return refsnpId
  **/
  @Schema(required = true, description = "A 64 bit positive integer that is uniquely and forever assigned to this RefSNP object")
  public String getRefsnpId() {
    return refsnpId;
  }
  public void setRefsnpId(String refsnpId) {
    this.refsnpId = refsnpId;
  }
  public RefsnpSnapshot createDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  

  /**
  * The date the RefSNP was created
  * @return createDate
  **/
  @Schema(example = "2001-01-15T00:00Z", required = true, description = "The date the RefSNP was created")
  public String getCreateDate() {
    return createDate;
  }
  public void setCreateDate(String createDate) {
    this.createDate = createDate;
  }
  public RefsnpSnapshot lastUpdateDate(String lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
    return this;
  }

  

  /**
  * The date the RefSNP was last updated or create_date if never updated
  * @return lastUpdateDate
  **/
  @Schema(example = "2001-01-15T00:00Z", required = true, description = "The date the RefSNP was last updated or create_date if never updated")
  public String getLastUpdateDate() {
    return lastUpdateDate;
  }
  public void setLastUpdateDate(String lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
  }
  public RefsnpSnapshot lastUpdateBuildId(String lastUpdateBuildId) {
    this.lastUpdateBuildId = lastUpdateBuildId;
    return this;
  }

  

  /**
  * The id of the last dbSNP build in which this RefSNP was created or updated
  * @return lastUpdateBuildId
  **/
  @Schema(required = true, description = "The id of the last dbSNP build in which this RefSNP was created or updated")
  public String getLastUpdateBuildId() {
    return lastUpdateBuildId;
  }
  public void setLastUpdateBuildId(String lastUpdateBuildId) {
    this.lastUpdateBuildId = lastUpdateBuildId;
  }
  public RefsnpSnapshot dbsnp1Merges(List<Dbsnp1MergeEvent> dbsnp1Merges) {
    this.dbsnp1Merges = dbsnp1Merges;
    return this;
  }

  public RefsnpSnapshot addDbsnp1MergesItem(Dbsnp1MergeEvent dbsnp1MergesItem) {
    this.dbsnp1Merges.add(dbsnp1MergesItem);
    return this;
  }

  /**
  * Note: this field is for dbsnp1 merge only. Record of each time another RefSNP objects merged into this RefSNP because the RsAnchors of each were the same.  If the recipient of a merge then merges into yet a third RefSNP, the list is flattened.
  * @return dbsnp1Merges
  **/
  @Schema(required = true, description = "Note: this field is for dbsnp1 merge only. Record of each time another RefSNP objects merged into this RefSNP because the RsAnchors of each were the same.  If the recipient of a merge then merges into yet a third RefSNP, the list is flattened.")
  public List<Dbsnp1MergeEvent> getDbsnp1Merges() {
    return dbsnp1Merges;
  }
  public void setDbsnp1Merges(List<Dbsnp1MergeEvent> dbsnp1Merges) {
    this.dbsnp1Merges = dbsnp1Merges;
  }
  public RefsnpSnapshot citations(List<Integer> citations) {
    this.citations = citations;
    return this;
  }

  public RefsnpSnapshot addCitationsItem(Integer citationsItem) {
    this.citations.add(citationsItem);
    return this;
  }

  /**
  * Set of PubMed IDs (PMIDs) for this RefSNP or its supporting submissions
  * @return citations
  **/
  @Schema(required = true, description = "Set of PubMed IDs (PMIDs) for this RefSNP or its supporting submissions")
  public List<Integer> getCitations() {
    return citations;
  }
  public void setCitations(List<Integer> citations) {
    this.citations = citations;
  }
  public RefsnpSnapshot lostObsMovements(List<LostObsMovement> lostObsMovements) {
    this.lostObsMovements = lostObsMovements;
    return this;
  }

  public RefsnpSnapshot addLostObsMovementsItem(LostObsMovement lostObsMovementsItem) {
    this.lostObsMovements.add(lostObsMovementsItem);
    return this;
  }

  /**
  * Movements recording observations lost between the previous release and this release
  * @return lostObsMovements
  **/
  @Schema(required = true, description = "Movements recording observations lost between the previous release and this release")
  public List<LostObsMovement> getLostObsMovements() {
    return lostObsMovements;
  }
  public void setLostObsMovements(List<LostObsMovement> lostObsMovements) {
    this.lostObsMovements = lostObsMovements;
  }
  public RefsnpSnapshot presentObsMovements(List<PresentObsMovement> presentObsMovements) {
    this.presentObsMovements = presentObsMovements;
    return this;
  }

  public RefsnpSnapshot addPresentObsMovementsItem(PresentObsMovement presentObsMovementsItem) {
    this.presentObsMovements.add(presentObsMovementsItem);
    return this;
  }

  /**
  * The record of movements between the previous and current release for observations mapped to this RefSNP by the Alignment Data Set used in this release
  * @return presentObsMovements
  **/
  @Schema(required = true, description = "The record of movements between the previous and current release for observations mapped to this RefSNP by the Alignment Data Set used in this release")
  public List<PresentObsMovement> getPresentObsMovements() {
    return presentObsMovements;
  }
  public void setPresentObsMovements(List<PresentObsMovement> presentObsMovements) {
    this.presentObsMovements = presentObsMovements;
  }
  public RefsnpSnapshot nosnpposSnapshotData(NosnpposSnapshotData nosnpposSnapshotData) {
    this.nosnpposSnapshotData = nosnpposSnapshotData;
    return this;
  }

  

  /**
  * Get nosnpposSnapshotData
  * @return nosnpposSnapshotData
  **/
  @Schema(description = "")
  public NosnpposSnapshotData getNosnpposSnapshotData() {
    return nosnpposSnapshotData;
  }
  public void setNosnpposSnapshotData(NosnpposSnapshotData nosnpposSnapshotData) {
    this.nosnpposSnapshotData = nosnpposSnapshotData;
  }
  public RefsnpSnapshot withdrawnSnapshotData(WithdrawnSnapshotData withdrawnSnapshotData) {
    this.withdrawnSnapshotData = withdrawnSnapshotData;
    return this;
  }

  

  /**
  * Get withdrawnSnapshotData
  * @return withdrawnSnapshotData
  **/
  @Schema(description = "")
  public WithdrawnSnapshotData getWithdrawnSnapshotData() {
    return withdrawnSnapshotData;
  }
  public void setWithdrawnSnapshotData(WithdrawnSnapshotData withdrawnSnapshotData) {
    this.withdrawnSnapshotData = withdrawnSnapshotData;
  }
  public RefsnpSnapshot primarySnapshotData(PrimarySnapshotData primarySnapshotData) {
    this.primarySnapshotData = primarySnapshotData;
    return this;
  }

  

  /**
  * Get primarySnapshotData
  * @return primarySnapshotData
  **/
  @Schema(description = "")
  public PrimarySnapshotData getPrimarySnapshotData() {
    return primarySnapshotData;
  }
  public void setPrimarySnapshotData(PrimarySnapshotData primarySnapshotData) {
    this.primarySnapshotData = primarySnapshotData;
  }
  public RefsnpSnapshot mergedSnapshotData(MergedSnapshotData mergedSnapshotData) {
    this.mergedSnapshotData = mergedSnapshotData;
    return this;
  }

  

  /**
  * Get mergedSnapshotData
  * @return mergedSnapshotData
  **/
  @Schema(description = "")
  public MergedSnapshotData getMergedSnapshotData() {
    return mergedSnapshotData;
  }
  public void setMergedSnapshotData(MergedSnapshotData mergedSnapshotData) {
    this.mergedSnapshotData = mergedSnapshotData;
  }
  public RefsnpSnapshot unsupportedSnapshotData(UnsupportedSnapshotData unsupportedSnapshotData) {
    this.unsupportedSnapshotData = unsupportedSnapshotData;
    return this;
  }

  

  /**
  * Get unsupportedSnapshotData
  * @return unsupportedSnapshotData
  **/
  @Schema(description = "")
  public UnsupportedSnapshotData getUnsupportedSnapshotData() {
    return unsupportedSnapshotData;
  }
  public void setUnsupportedSnapshotData(UnsupportedSnapshotData unsupportedSnapshotData) {
    this.unsupportedSnapshotData = unsupportedSnapshotData;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefsnpSnapshot refsnpSnapshot = (RefsnpSnapshot) o;
    return Objects.equals(this.refsnpId, refsnpSnapshot.refsnpId) &&
        Objects.equals(this.createDate, refsnpSnapshot.createDate) &&
        Objects.equals(this.lastUpdateDate, refsnpSnapshot.lastUpdateDate) &&
        Objects.equals(this.lastUpdateBuildId, refsnpSnapshot.lastUpdateBuildId) &&
        Objects.equals(this.dbsnp1Merges, refsnpSnapshot.dbsnp1Merges) &&
        Objects.equals(this.citations, refsnpSnapshot.citations) &&
        Objects.equals(this.lostObsMovements, refsnpSnapshot.lostObsMovements) &&
        Objects.equals(this.presentObsMovements, refsnpSnapshot.presentObsMovements) &&
        Objects.equals(this.nosnpposSnapshotData, refsnpSnapshot.nosnpposSnapshotData) &&
        Objects.equals(this.withdrawnSnapshotData, refsnpSnapshot.withdrawnSnapshotData) &&
        Objects.equals(this.primarySnapshotData, refsnpSnapshot.primarySnapshotData) &&
        Objects.equals(this.mergedSnapshotData, refsnpSnapshot.mergedSnapshotData) &&
        Objects.equals(this.unsupportedSnapshotData, refsnpSnapshot.unsupportedSnapshotData);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(refsnpId, createDate, lastUpdateDate, lastUpdateBuildId, dbsnp1Merges, citations, lostObsMovements, presentObsMovements, nosnpposSnapshotData, withdrawnSnapshotData, primarySnapshotData, mergedSnapshotData, unsupportedSnapshotData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefsnpSnapshot {\n");
    
    sb.append("    refsnpId: ").append(toIndentedString(refsnpId)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    lastUpdateDate: ").append(toIndentedString(lastUpdateDate)).append("\n");
    sb.append("    lastUpdateBuildId: ").append(toIndentedString(lastUpdateBuildId)).append("\n");
    sb.append("    dbsnp1Merges: ").append(toIndentedString(dbsnp1Merges)).append("\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("    lostObsMovements: ").append(toIndentedString(lostObsMovements)).append("\n");
    sb.append("    presentObsMovements: ").append(toIndentedString(presentObsMovements)).append("\n");
    sb.append("    nosnpposSnapshotData: ").append(toIndentedString(nosnpposSnapshotData)).append("\n");
    sb.append("    withdrawnSnapshotData: ").append(toIndentedString(withdrawnSnapshotData)).append("\n");
    sb.append("    primarySnapshotData: ").append(toIndentedString(primarySnapshotData)).append("\n");
    sb.append("    mergedSnapshotData: ").append(toIndentedString(mergedSnapshotData)).append("\n");
    sb.append("    unsupportedSnapshotData: ").append(toIndentedString(unsupportedSnapshotData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
