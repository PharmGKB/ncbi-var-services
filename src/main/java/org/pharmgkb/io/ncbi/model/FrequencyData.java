/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.pharmgkb.io.ncbi.model.Spdi;

/**
 * Metadata and allele counts for an allele in a particular study/project
 */
@Schema(description = "Metadata and allele counts for an allele in a particular study/project")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-25T10:32:24.325-07:00[America/Los_Angeles]")public class FrequencyData {

  @SerializedName("study_name")
  private String studyName = null;

  @SerializedName("study_version")
  private Integer studyVersion = null;

  @SerializedName("local_row_id")
  private Integer localRowId = null;

  @SerializedName("observation")
  private Spdi observation = null;

  @SerializedName("allele_count")
  private Integer alleleCount = null;

  @SerializedName("total_count")
  private Integer totalCount = null;
  public FrequencyData studyName(String studyName) {
    this.studyName = studyName;
    return this;
  }

  

  /**
  * Name part of study_id
  * @return studyName
  **/
  @Schema(example = "ExAC", required = true, description = "Name part of study_id")
  public String getStudyName() {
    return studyName;
  }
  public void setStudyName(String studyName) {
    this.studyName = studyName;
  }
  public FrequencyData studyVersion(Integer studyVersion) {
    this.studyVersion = studyVersion;
    return this;
  }

  

  /**
  * Version part of study_id
  * @return studyVersion
  **/
  @Schema(example = "1", required = true, description = "Version part of study_id")
  public Integer getStudyVersion() {
    return studyVersion;
  }
  public void setStudyVersion(Integer studyVersion) {
    this.studyVersion = studyVersion;
  }
  public FrequencyData localRowId(Integer localRowId) {
    this.localRowId = localRowId;
    return this;
  }

  

  /**
  * Row number id within submission
  * @return localRowId
  **/
  @Schema(example = "1", required = true, description = "Row number id within submission")
  public Integer getLocalRowId() {
    return localRowId;
  }
  public void setLocalRowId(Integer localRowId) {
    this.localRowId = localRowId;
  }
  public FrequencyData observation(Spdi observation) {
    this.observation = observation;
    return this;
  }

  

  /**
  * Get observation
  * @return observation
  **/
  @Schema(required = true, description = "")
  public Spdi getObservation() {
    return observation;
  }
  public void setObservation(Spdi observation) {
    this.observation = observation;
  }
  public FrequencyData alleleCount(Integer alleleCount) {
    this.alleleCount = alleleCount;
    return this;
  }

  

  /**
  * The number of chromosomes in the study where this allele was observed
  * @return alleleCount
  **/
  @Schema(required = true, description = "The number of chromosomes in the study where this allele was observed")
  public Integer getAlleleCount() {
    return alleleCount;
  }
  public void setAlleleCount(Integer alleleCount) {
    this.alleleCount = alleleCount;
  }
  public FrequencyData totalCount(Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  

  /**
  * The number of chromosomes in the study
  * @return totalCount
  **/
  @Schema(required = true, description = "The number of chromosomes in the study")
  public Integer getTotalCount() {
    return totalCount;
  }
  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FrequencyData frequencyData = (FrequencyData) o;
    return Objects.equals(this.studyName, frequencyData.studyName) &&
        Objects.equals(this.studyVersion, frequencyData.studyVersion) &&
        Objects.equals(this.localRowId, frequencyData.localRowId) &&
        Objects.equals(this.observation, frequencyData.observation) &&
        Objects.equals(this.alleleCount, frequencyData.alleleCount) &&
        Objects.equals(this.totalCount, frequencyData.totalCount);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(studyName, studyVersion, localRowId, observation, alleleCount, totalCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FrequencyData {\n");
    
    sb.append("    studyName: ").append(toIndentedString(studyName)).append("\n");
    sb.append("    studyVersion: ").append(toIndentedString(studyVersion)).append("\n");
    sb.append("    localRowId: ").append(toIndentedString(localRowId)).append("\n");
    sb.append("    observation: ").append(toIndentedString(observation)).append("\n");
    sb.append("    alleleCount: ").append(toIndentedString(alleleCount)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
