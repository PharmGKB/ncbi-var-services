/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.api;

import org.pharmgkb.io.ncbi.ApiCallback;
import org.pharmgkb.io.ncbi.ApiClient;
import org.pharmgkb.io.ncbi.ApiException;
import org.pharmgkb.io.ncbi.ApiResponse;
import org.pharmgkb.io.ncbi.Configuration;
import org.pharmgkb.io.ncbi.Pair;
import org.pharmgkb.io.ncbi.ProgressRequestBody;
import org.pharmgkb.io.ncbi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.pharmgkb.io.ncbi.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FrequencyNotYetAvailableComingSoonApi {
    private ApiClient apiClient;

    public FrequencyNotYetAvailableComingSoonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FrequencyNotYetAvailableComingSoonApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for frequencyByInterval
     * @param seqId Sequence id in &#x27;accession.version&#x27; format (required)
     * @param position Zero-based SPDI-like start position. The number of nucleotides to advance from the position before the first nucleotides before starting the interval. (required)
     * @param length SPDI-like length of interval in units of nucleotides (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call frequencyByIntervalCall(String seqId, Integer position, Integer length, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/interval/{seq_id}:{position}:{length}/overlapping_frequency_records"
            .replaceAll("\\{" + "seq_id" + "\\}", apiClient.escapeString(seqId.toString()))
            .replaceAll("\\{" + "position" + "\\}", apiClient.escapeString(position.toString()))
            .replaceAll("\\{" + "length" + "\\}", apiClient.escapeString(length.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call frequencyByIntervalValidateBeforeCall(String seqId, Integer position, Integer length, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'seqId' is set
        if (seqId == null) {
            throw new ApiException("Missing the required parameter 'seqId' when calling frequencyByInterval(Async)");
        }
        // verify the required parameter 'position' is set
        if (position == null) {
            throw new ApiException("Missing the required parameter 'position' when calling frequencyByInterval(Async)");
        }
        // verify the required parameter 'length' is set
        if (length == null) {
            throw new ApiException("Missing the required parameter 'length' when calling frequencyByInterval(Async)");
        }
        
        com.squareup.okhttp.Call call = frequencyByIntervalCall(seqId, position, length, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve frequencies for variants overlapping a position range
     * Retrieve frequencies for variants whose Contextual SPDI overlaps the sequence interval in the query. Detailed information about ids used in reply could be retrieved using \&quot;/metadata/frequency\&quot; endpoint. 
     * @param seqId Sequence id in &#x27;accession.version&#x27; format (required)
     * @param position Zero-based SPDI-like start position. The number of nucleotides to advance from the position before the first nucleotides before starting the interval. (required)
     * @param length SPDI-like length of interval in units of nucleotides (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object frequencyByInterval(String seqId, Integer position, Integer length) throws ApiException {
        ApiResponse<Object> resp = frequencyByIntervalWithHttpInfo(seqId, position, length);
        return resp.getData();
    }

    /**
     * Retrieve frequencies for variants overlapping a position range
     * Retrieve frequencies for variants whose Contextual SPDI overlaps the sequence interval in the query. Detailed information about ids used in reply could be retrieved using \&quot;/metadata/frequency\&quot; endpoint. 
     * @param seqId Sequence id in &#x27;accession.version&#x27; format (required)
     * @param position Zero-based SPDI-like start position. The number of nucleotides to advance from the position before the first nucleotides before starting the interval. (required)
     * @param length SPDI-like length of interval in units of nucleotides (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> frequencyByIntervalWithHttpInfo(String seqId, Integer position, Integer length) throws ApiException {
        com.squareup.okhttp.Call call = frequencyByIntervalValidateBeforeCall(seqId, position, length, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve frequencies for variants overlapping a position range (asynchronously)
     * Retrieve frequencies for variants whose Contextual SPDI overlaps the sequence interval in the query. Detailed information about ids used in reply could be retrieved using \&quot;/metadata/frequency\&quot; endpoint. 
     * @param seqId Sequence id in &#x27;accession.version&#x27; format (required)
     * @param position Zero-based SPDI-like start position. The number of nucleotides to advance from the position before the first nucleotides before starting the interval. (required)
     * @param length SPDI-like length of interval in units of nucleotides (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call frequencyByIntervalAsync(String seqId, Integer position, Integer length, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = frequencyByIntervalValidateBeforeCall(seqId, position, length, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for frequencyMetadata
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call frequencyMetadataCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/metadata/frequency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call frequencyMetadataValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = frequencyMetadataCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve frequency metadata
     * Retrieve information that describes all studies and populations used by frequency endpoint.
     * @return Map
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map frequencyMetadata() throws ApiException {
        ApiResponse<Map> resp = frequencyMetadataWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve frequency metadata
     * Retrieve information that describes all studies and populations used by frequency endpoint.
     * @return ApiResponse&lt;Map&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map> frequencyMetadataWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = frequencyMetadataValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve frequency metadata (asynchronously)
     * Retrieve information that describes all studies and populations used by frequency endpoint.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call frequencyMetadataAsync(final ApiCallback<Map> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = frequencyMetadataValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
