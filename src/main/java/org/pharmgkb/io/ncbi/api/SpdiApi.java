/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.api;

import org.pharmgkb.io.ncbi.ApiCallback;
import org.pharmgkb.io.ncbi.ApiClient;
import org.pharmgkb.io.ncbi.ApiException;
import org.pharmgkb.io.ncbi.ApiResponse;
import org.pharmgkb.io.ncbi.Configuration;
import org.pharmgkb.io.ncbi.Pair;
import org.pharmgkb.io.ncbi.ProgressRequestBody;
import org.pharmgkb.io.ncbi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.pharmgkb.io.ncbi.model.Error;
import org.pharmgkb.io.ncbi.model.HgvsSuccess;
import org.pharmgkb.io.ncbi.model.RsidsSuccess;
import org.pharmgkb.io.ncbi.model.SpdiSuccess;
import org.pharmgkb.io.ncbi.model.SpdisSuccess;
import org.pharmgkb.io.ncbi.model.VcfFieldsSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpdiApi {
    private ApiClient apiClient;

    public SpdiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpdiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for spdiSpdiAllEquivalentContextualGet
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiAllEquivalentContextualGetCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spdi/{spdi}/all_equivalent_contextual"
            .replaceAll("\\{" + "spdi" + "\\}", apiClient.escapeString(spdi.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spdiSpdiAllEquivalentContextualGetValidateBeforeCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spdi' is set
        if (spdi == null) {
            throw new ApiException("Missing the required parameter 'spdi' when calling spdiSpdiAllEquivalentContextualGet(Async)");
        }
        
        com.squareup.okhttp.Call call = spdiSpdiAllEquivalentContextualGetCall(spdi, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve equivalent contextual allele on all aligned sequences
     * Let S be the set of all sequences where the latest alignment specifies a region equivalent to the deletion region of the input allele. For each sequence s in S, calculates a contextual allele equivalent to the input but located on s. The retrieved list cannot be empty because S contains the reference sequence for the input allele and therefore, the retrieved list will contain the contextual allele for the input allele.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return SpdisSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpdisSuccess spdiSpdiAllEquivalentContextualGet(String spdi) throws ApiException {
        ApiResponse<SpdisSuccess> resp = spdiSpdiAllEquivalentContextualGetWithHttpInfo(spdi);
        return resp.getData();
    }

    /**
     * Retrieve equivalent contextual allele on all aligned sequences
     * Let S be the set of all sequences where the latest alignment specifies a region equivalent to the deletion region of the input allele. For each sequence s in S, calculates a contextual allele equivalent to the input but located on s. The retrieved list cannot be empty because S contains the reference sequence for the input allele and therefore, the retrieved list will contain the contextual allele for the input allele.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return ApiResponse&lt;SpdisSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpdisSuccess> spdiSpdiAllEquivalentContextualGetWithHttpInfo(String spdi) throws ApiException {
        com.squareup.okhttp.Call call = spdiSpdiAllEquivalentContextualGetValidateBeforeCall(spdi, null, null);
        Type localVarReturnType = new TypeToken<SpdisSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve equivalent contextual allele on all aligned sequences (asynchronously)
     * Let S be the set of all sequences where the latest alignment specifies a region equivalent to the deletion region of the input allele. For each sequence s in S, calculates a contextual allele equivalent to the input but located on s. The retrieved list cannot be empty because S contains the reference sequence for the input allele and therefore, the retrieved list will contain the contextual allele for the input allele.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiAllEquivalentContextualGetAsync(String spdi, final ApiCallback<SpdisSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spdiSpdiAllEquivalentContextualGetValidateBeforeCall(spdi, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpdisSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spdiSpdiCanonicalRepresentativeGet
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiCanonicalRepresentativeGetCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spdi/{spdi}/canonical_representative"
            .replaceAll("\\{" + "spdi" + "\\}", apiClient.escapeString(spdi.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spdiSpdiCanonicalRepresentativeGetValidateBeforeCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spdi' is set
        if (spdi == null) {
            throw new ApiException("Missing the required parameter 'spdi' when calling spdiSpdiCanonicalRepresentativeGet(Async)");
        }
        
        com.squareup.okhttp.Call call = spdiSpdiCanonicalRepresentativeGetCall(spdi, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve canonical allele representative
     * Get the canonical allele representative for a contextual allele, using the latest alignment data.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return SpdiSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpdiSuccess spdiSpdiCanonicalRepresentativeGet(String spdi) throws ApiException {
        ApiResponse<SpdiSuccess> resp = spdiSpdiCanonicalRepresentativeGetWithHttpInfo(spdi);
        return resp.getData();
    }

    /**
     * Retrieve canonical allele representative
     * Get the canonical allele representative for a contextual allele, using the latest alignment data.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return ApiResponse&lt;SpdiSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpdiSuccess> spdiSpdiCanonicalRepresentativeGetWithHttpInfo(String spdi) throws ApiException {
        com.squareup.okhttp.Call call = spdiSpdiCanonicalRepresentativeGetValidateBeforeCall(spdi, null, null);
        Type localVarReturnType = new TypeToken<SpdiSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve canonical allele representative (asynchronously)
     * Get the canonical allele representative for a contextual allele, using the latest alignment data.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiCanonicalRepresentativeGetAsync(String spdi, final ApiCallback<SpdiSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spdiSpdiCanonicalRepresentativeGetValidateBeforeCall(spdi, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpdiSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spdiSpdiContextualGet
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiContextualGetCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spdi/{spdi}/contextual"
            .replaceAll("\\{" + "spdi" + "\\}", apiClient.escapeString(spdi.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spdiSpdiContextualGetValidateBeforeCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spdi' is set
        if (spdi == null) {
            throw new ApiException("Missing the required parameter 'spdi' when calling spdiSpdiContextualGet(Async)");
        }
        
        com.squareup.okhttp.Call call = spdiSpdiContextualGetCall(spdi, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve contextual allele in SPDI syntax for provided allele
     * An allele in SPDI syntax may be over-precise. This service returns the same result as applying the Blossom Precision Correction Algorithm to the input allele.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return SpdiSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpdiSuccess spdiSpdiContextualGet(String spdi) throws ApiException {
        ApiResponse<SpdiSuccess> resp = spdiSpdiContextualGetWithHttpInfo(spdi);
        return resp.getData();
    }

    /**
     * Retrieve contextual allele in SPDI syntax for provided allele
     * An allele in SPDI syntax may be over-precise. This service returns the same result as applying the Blossom Precision Correction Algorithm to the input allele.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return ApiResponse&lt;SpdiSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpdiSuccess> spdiSpdiContextualGetWithHttpInfo(String spdi) throws ApiException {
        com.squareup.okhttp.Call call = spdiSpdiContextualGetValidateBeforeCall(spdi, null, null);
        Type localVarReturnType = new TypeToken<SpdiSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve contextual allele in SPDI syntax for provided allele (asynchronously)
     * An allele in SPDI syntax may be over-precise. This service returns the same result as applying the Blossom Precision Correction Algorithm to the input allele.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiContextualGetAsync(String spdi, final ApiCallback<SpdiSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spdiSpdiContextualGetValidateBeforeCall(spdi, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpdiSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spdiSpdiHgvsGet
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiHgvsGetCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spdi/{spdi}/hgvs"
            .replaceAll("\\{" + "spdi" + "\\}", apiClient.escapeString(spdi.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spdiSpdiHgvsGetValidateBeforeCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spdi' is set
        if (spdi == null) {
            throw new ApiException("Missing the required parameter 'spdi' when calling spdiSpdiHgvsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = spdiSpdiHgvsGetCall(spdi, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve HGVS notation for contextual allele in SPDI Syntax
     * Convert the contextual allele in SPDI syntax to the right-shifted HGVS notation.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return HgvsSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HgvsSuccess spdiSpdiHgvsGet(String spdi) throws ApiException {
        ApiResponse<HgvsSuccess> resp = spdiSpdiHgvsGetWithHttpInfo(spdi);
        return resp.getData();
    }

    /**
     * Retrieve HGVS notation for contextual allele in SPDI Syntax
     * Convert the contextual allele in SPDI syntax to the right-shifted HGVS notation.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return ApiResponse&lt;HgvsSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HgvsSuccess> spdiSpdiHgvsGetWithHttpInfo(String spdi) throws ApiException {
        com.squareup.okhttp.Call call = spdiSpdiHgvsGetValidateBeforeCall(spdi, null, null);
        Type localVarReturnType = new TypeToken<HgvsSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve HGVS notation for contextual allele in SPDI Syntax (asynchronously)
     * Convert the contextual allele in SPDI syntax to the right-shifted HGVS notation.
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiHgvsGetAsync(String spdi, final ApiCallback<HgvsSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spdiSpdiHgvsGetValidateBeforeCall(spdi, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HgvsSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spdiSpdiRsidsGet
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiRsidsGetCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spdi/{spdi}/rsids"
            .replaceAll("\\{" + "spdi" + "\\}", apiClient.escapeString(spdi.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spdiSpdiRsidsGetValidateBeforeCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spdi' is set
        if (spdi == null) {
            throw new ApiException("Missing the required parameter 'spdi' when calling spdiSpdiRsidsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = spdiSpdiRsidsGetCall(spdi, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lookup the RSIDs (if any) associated with the input allele
     * Given a contextual allele, return the ID numbers of the RefSNPs that include that contextual allele (if there are any).
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return RsidsSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RsidsSuccess spdiSpdiRsidsGet(String spdi) throws ApiException {
        ApiResponse<RsidsSuccess> resp = spdiSpdiRsidsGetWithHttpInfo(spdi);
        return resp.getData();
    }

    /**
     * Lookup the RSIDs (if any) associated with the input allele
     * Given a contextual allele, return the ID numbers of the RefSNPs that include that contextual allele (if there are any).
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return ApiResponse&lt;RsidsSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RsidsSuccess> spdiSpdiRsidsGetWithHttpInfo(String spdi) throws ApiException {
        com.squareup.okhttp.Call call = spdiSpdiRsidsGetValidateBeforeCall(spdi, null, null);
        Type localVarReturnType = new TypeToken<RsidsSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lookup the RSIDs (if any) associated with the input allele (asynchronously)
     * Given a contextual allele, return the ID numbers of the RefSNPs that include that contextual allele (if there are any).
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiRsidsGetAsync(String spdi, final ApiCallback<RsidsSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spdiSpdiRsidsGetValidateBeforeCall(spdi, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RsidsSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spdiSpdiVcfFieldsGet
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiVcfFieldsGetCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/spdi/{spdi}/vcf_fields"
            .replaceAll("\\{" + "spdi" + "\\}", apiClient.escapeString(spdi.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spdiSpdiVcfFieldsGetValidateBeforeCall(String spdi, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spdi' is set
        if (spdi == null) {
            throw new ApiException("Missing the required parameter 'spdi' when calling spdiSpdiVcfFieldsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = spdiSpdiVcfFieldsGetCall(spdi, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve fields suitable for representing the input allele in VCF
     * Return allele-description fields of a VCF entry (CHROM, POS, REF, ALT) for the contextual allele corresponding to the input SPDI
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return VcfFieldsSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VcfFieldsSuccess spdiSpdiVcfFieldsGet(String spdi) throws ApiException {
        ApiResponse<VcfFieldsSuccess> resp = spdiSpdiVcfFieldsGetWithHttpInfo(spdi);
        return resp.getData();
    }

    /**
     * Retrieve fields suitable for representing the input allele in VCF
     * Return allele-description fields of a VCF entry (CHROM, POS, REF, ALT) for the contextual allele corresponding to the input SPDI
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @return ApiResponse&lt;VcfFieldsSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VcfFieldsSuccess> spdiSpdiVcfFieldsGetWithHttpInfo(String spdi) throws ApiException {
        com.squareup.okhttp.Call call = spdiSpdiVcfFieldsGetValidateBeforeCall(spdi, null, null);
        Type localVarReturnType = new TypeToken<VcfFieldsSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve fields suitable for representing the input allele in VCF (asynchronously)
     * Return allele-description fields of a VCF entry (CHROM, POS, REF, ALT) for the contextual allele corresponding to the input SPDI
     * @param spdi Allele in SPDI syntax of SEQUENCE-ID:POSITION:DEL-SEQUENCE:INS-SEQUENCE (or just deletion length: SEQUENCE-ID:POSITION:DEL-LEN:INS-SEQUENCE) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spdiSpdiVcfFieldsGetAsync(String spdi, final ApiCallback<VcfFieldsSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spdiSpdiVcfFieldsGetValidateBeforeCall(spdi, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VcfFieldsSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
