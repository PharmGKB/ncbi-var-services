/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.api;

import org.pharmgkb.io.ncbi.ApiCallback;
import org.pharmgkb.io.ncbi.ApiClient;
import org.pharmgkb.io.ncbi.ApiException;
import org.pharmgkb.io.ncbi.ApiResponse;
import org.pharmgkb.io.ncbi.Configuration;
import org.pharmgkb.io.ncbi.Pair;
import org.pharmgkb.io.ncbi.ProgressRequestBody;
import org.pharmgkb.io.ncbi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.pharmgkb.io.ncbi.model.Error;
import org.pharmgkb.io.ncbi.model.HgvsBatchSuccess;
import org.pharmgkb.io.ncbi.model.SpdisSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HgvsApi {
    private ApiClient apiClient;

    public HgvsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HgvsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for hgvsBatchContextualsPost
     * @param body JSON object containing a single field &quot;hgvs&quot; which contains an array of the variants to process, each in HGVS notation. Up to 50,000 expressions may be included in a single request. (required)
     * @param assembly GenColl assembly accession for provided list of HGVS. Used only if the hgvs uses a chr location like chr1:g.12345A&gt;T or chrX:g.234C&gt;G (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hgvsBatchContextualsPostCall(List<String> body, String assembly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/hgvs/batch/contextuals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assembly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assembly", assembly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hgvsBatchContextualsPostValidateBeforeCall(List<String> body, String assembly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling hgvsBatchContextualsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = hgvsBatchContextualsPostCall(body, assembly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve contextual alleles for each input
     * For the input HGVS notation, retrieve all contextual alleles in SPDI syntax. (There can be more than one because of differences in the way the two models represent variation. For example, NC_012920.1:m.961delTinsC(2_7) requires one SPDI for each number of cytosines inserted).
     * @param body JSON object containing a single field &quot;hgvs&quot; which contains an array of the variants to process, each in HGVS notation. Up to 50,000 expressions may be included in a single request. (required)
     * @param assembly GenColl assembly accession for provided list of HGVS. Used only if the hgvs uses a chr location like chr1:g.12345A&gt;T or chrX:g.234C&gt;G (optional)
     * @return HgvsBatchSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HgvsBatchSuccess hgvsBatchContextualsPost(List<String> body, String assembly) throws ApiException {
        ApiResponse<HgvsBatchSuccess> resp = hgvsBatchContextualsPostWithHttpInfo(body, assembly);
        return resp.getData();
    }

    /**
     * Retrieve contextual alleles for each input
     * For the input HGVS notation, retrieve all contextual alleles in SPDI syntax. (There can be more than one because of differences in the way the two models represent variation. For example, NC_012920.1:m.961delTinsC(2_7) requires one SPDI for each number of cytosines inserted).
     * @param body JSON object containing a single field &quot;hgvs&quot; which contains an array of the variants to process, each in HGVS notation. Up to 50,000 expressions may be included in a single request. (required)
     * @param assembly GenColl assembly accession for provided list of HGVS. Used only if the hgvs uses a chr location like chr1:g.12345A&gt;T or chrX:g.234C&gt;G (optional)
     * @return ApiResponse&lt;HgvsBatchSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HgvsBatchSuccess> hgvsBatchContextualsPostWithHttpInfo(List<String> body, String assembly) throws ApiException {
        com.squareup.okhttp.Call call = hgvsBatchContextualsPostValidateBeforeCall(body, assembly, null, null);
        Type localVarReturnType = new TypeToken<HgvsBatchSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve contextual alleles for each input (asynchronously)
     * For the input HGVS notation, retrieve all contextual alleles in SPDI syntax. (There can be more than one because of differences in the way the two models represent variation. For example, NC_012920.1:m.961delTinsC(2_7) requires one SPDI for each number of cytosines inserted).
     * @param body JSON object containing a single field &quot;hgvs&quot; which contains an array of the variants to process, each in HGVS notation. Up to 50,000 expressions may be included in a single request. (required)
     * @param assembly GenColl assembly accession for provided list of HGVS. Used only if the hgvs uses a chr location like chr1:g.12345A&gt;T or chrX:g.234C&gt;G (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hgvsBatchContextualsPostAsync(List<String> body, String assembly, final ApiCallback<HgvsBatchSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hgvsBatchContextualsPostValidateBeforeCall(body, assembly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HgvsBatchSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for hgvsHgvsContextualsGet
     * @param hgvs Allele in HGVS notation (required)
     * @param assembly GenColl assembly accession for provided list of HGVS. Required only if the hgvs uses a chr location like chr1:g.12345A&gt;T or chrX:g.234C&gt;G (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hgvsHgvsContextualsGetCall(String hgvs, String assembly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/hgvs/{hgvs}/contextuals"
            .replaceAll("\\{" + "hgvs" + "\\}", apiClient.escapeString(hgvs.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assembly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assembly", assembly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hgvsHgvsContextualsGetValidateBeforeCall(String hgvs, String assembly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hgvs' is set
        if (hgvs == null) {
            throw new ApiException("Missing the required parameter 'hgvs' when calling hgvsHgvsContextualsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = hgvsHgvsContextualsGetCall(hgvs, assembly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the contextual alleles equivalent to the HGVS notation input
     * For the input HGVS notation, retrieve all contextual alleles in SPDI syntax. (There can be more than one because of differences in the way the two models represent variation. For example, NC_012920.1:m.961delTinsC(2_7) requires one SPDI for each number of cytosines inserted.)
     * @param hgvs Allele in HGVS notation (required)
     * @param assembly GenColl assembly accession for provided list of HGVS. Required only if the hgvs uses a chr location like chr1:g.12345A&gt;T or chrX:g.234C&gt;G (optional)
     * @return SpdisSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpdisSuccess hgvsHgvsContextualsGet(String hgvs, String assembly) throws ApiException {
        ApiResponse<SpdisSuccess> resp = hgvsHgvsContextualsGetWithHttpInfo(hgvs, assembly);
        return resp.getData();
    }

    /**
     * Retrieve the contextual alleles equivalent to the HGVS notation input
     * For the input HGVS notation, retrieve all contextual alleles in SPDI syntax. (There can be more than one because of differences in the way the two models represent variation. For example, NC_012920.1:m.961delTinsC(2_7) requires one SPDI for each number of cytosines inserted.)
     * @param hgvs Allele in HGVS notation (required)
     * @param assembly GenColl assembly accession for provided list of HGVS. Required only if the hgvs uses a chr location like chr1:g.12345A&gt;T or chrX:g.234C&gt;G (optional)
     * @return ApiResponse&lt;SpdisSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpdisSuccess> hgvsHgvsContextualsGetWithHttpInfo(String hgvs, String assembly) throws ApiException {
        com.squareup.okhttp.Call call = hgvsHgvsContextualsGetValidateBeforeCall(hgvs, assembly, null, null);
        Type localVarReturnType = new TypeToken<SpdisSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the contextual alleles equivalent to the HGVS notation input (asynchronously)
     * For the input HGVS notation, retrieve all contextual alleles in SPDI syntax. (There can be more than one because of differences in the way the two models represent variation. For example, NC_012920.1:m.961delTinsC(2_7) requires one SPDI for each number of cytosines inserted.)
     * @param hgvs Allele in HGVS notation (required)
     * @param assembly GenColl assembly accession for provided list of HGVS. Required only if the hgvs uses a chr location like chr1:g.12345A&gt;T or chrX:g.234C&gt;G (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hgvsHgvsContextualsGetAsync(String hgvs, String assembly, final ApiCallback<SpdisSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hgvsHgvsContextualsGetValidateBeforeCall(hgvs, assembly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpdisSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
