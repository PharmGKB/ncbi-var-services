/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.api;

import org.pharmgkb.io.ncbi.ApiException;
import org.pharmgkb.io.ncbi.model.Error;
import org.pharmgkb.io.ncbi.model.PlacementWithAllele;
import org.pharmgkb.io.ncbi.model.RefsnpSnapshot;
import org.pharmgkb.io.ncbi.model.RefsnpSnapshotSuccess;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

/**
 * API tests for RefSnpApi
 */
public class RefSnpApiTest {

    private final RefSnpApi api = new RefSnpApi();

    /**
     * Lookup RefSNP object by RSID
     *
     * Retrieve data object associated with a RefSNP identifier for the current revision.  This is a beta-release of this service and the resulting schema is still under development.  User feedback is welcomed and appreciated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void betaRefsnpRsidGetTest() throws ApiException {
        String rsid = "9274407";
        RefsnpSnapshot response = api.betaRefsnpRsidGet(rsid);

        assertNotNull(response);
        assertEquals(rsid, response.getRefsnpId());
        
        assertNotNull(response.getPrimarySnapshotData());
        
        PlacementWithAllele placement = response.getPrimarySnapshotData().getPlacementsWithAllele().stream()
            .filter(PlacementWithAllele::isIsPtlp)
            .findFirst()
            .orElseThrow(() -> new ApiException("Placement expected and not found"));
        
        assertEquals("NC_000006.12", placement.getSeqId());
    }
}
