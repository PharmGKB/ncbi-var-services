/*
 * Variation Services
 * Services for variation data processing<p> <div style=\"font-size:1.1em;font-weight:normal\">NOTE: This service is still in beta testing mode. Please limit your request rate to 1 request/second.  dbSNP provides bulk download in VCF and JSON on the <a href=\"ftp://ftp.ncbi.nih.gov/snp/latest_release/\">FTP site</a> for users with a large number of RefSNPs (>100K) to process.</div> 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: variation-services@ncbi.nlm.nih.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.pharmgkb.io.ncbi.api;

import org.pharmgkb.io.ncbi.ApiException;
import org.pharmgkb.io.ncbi.model.Error;
import org.pharmgkb.io.ncbi.model.HgvsSuccess;
import org.pharmgkb.io.ncbi.model.RsidsSuccess;
import org.pharmgkb.io.ncbi.model.SpdiSuccess;
import org.pharmgkb.io.ncbi.model.SpdisSuccess;
import org.pharmgkb.io.ncbi.model.VcfFieldsSuccess;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SpdiApi
 */
@Ignore
public class SpdiApiTest {

    private final SpdiApi api = new SpdiApi();

    /**
     * Retrieve equivalent contextual allele on all aligned sequences
     *
     * Let S be the set of all sequences where the latest alignment specifies a region equivalent to the deletion region of the input allele. For each sequence s in S, calculates a contextual allele equivalent to the input but located on s. The retrieved list cannot be empty because S contains the reference sequence for the input allele and therefore, the retrieved list will contain the contextual allele for the input allele.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spdiSpdiAllEquivalentContextualGetTest() throws ApiException {
        String spdi = null;
        SpdisSuccess response = api.spdiSpdiAllEquivalentContextualGet(spdi);

        // TODO: test validations
    }
    /**
     * Retrieve canonical allele representative
     *
     * Get the canonical allele representative for a contextual allele, using the latest alignment data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spdiSpdiCanonicalRepresentativeGetTest() throws ApiException {
        String spdi = null;
        SpdiSuccess response = api.spdiSpdiCanonicalRepresentativeGet(spdi);

        // TODO: test validations
    }
    /**
     * Retrieve contextual allele in SPDI syntax for provided allele
     *
     * An allele in SPDI syntax may be over-precise. This service returns the same result as applying the Blossom Precision Correction Algorithm to the input allele.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spdiSpdiContextualGetTest() throws ApiException {
        String spdi = null;
        SpdiSuccess response = api.spdiSpdiContextualGet(spdi);

        // TODO: test validations
    }
    /**
     * Retrieve HGVS notation for contextual allele in SPDI Syntax
     *
     * Convert the contextual allele in SPDI syntax to the right-shifted HGVS notation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spdiSpdiHgvsGetTest() throws ApiException {
        String spdi = null;
        HgvsSuccess response = api.spdiSpdiHgvsGet(spdi);

        // TODO: test validations
    }
    /**
     * Lookup the RSIDs (if any) associated with the input allele
     *
     * Given a contextual allele, return the ID numbers of the RefSNPs that include that contextual allele (if there are any).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spdiSpdiRsidsGetTest() throws ApiException {
        String spdi = null;
        RsidsSuccess response = api.spdiSpdiRsidsGet(spdi);

        // TODO: test validations
    }
    /**
     * Retrieve fields suitable for representing the input allele in VCF
     *
     * Return allele-description fields of a VCF entry (CHROM, POS, REF, ALT) for the contextual allele corresponding to the input SPDI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spdiSpdiVcfFieldsGetTest() throws ApiException {
        String spdi = null;
        VcfFieldsSuccess response = api.spdiSpdiVcfFieldsGet(spdi);

        // TODO: test validations
    }
}
